import React, { Component, Fragment } from 'react'
import { Router, Route, Redirect } from 'react-router-dom'
import createHashHistory from 'history/createHashHistory'
import Nav from './Nav'
import Week from './Week'
import ErrorPage from './ErrorPage'
import AddMenu from './AddMenu'
import DeleteMenu from './DeleteMenu'
import AddItem from './AddItem'

emptyMenu = [
  { title: 'Monday', items: [] }
  { title: 'Tuesday', items: [] }
  { title: 'Wednesday', items: [] }
  { title: 'Thursday', items: [] }
  { title: 'Friday', items: [] }
]

history = createHashHistory()

export default class App extends Component:
  state = { menus: { default: emptyMenu } }

  onAdd() => this.setState({ add: true })

  onAddConfirm(id) =>
    { menus } = this.state
    if !id || menus[id]: return
    this.setState(state => ({
      add: false
      menus: {
        ...state.menus
        [id]: emptyMenu~clone()
      }
    }))
    history.push(`/${id}`)

  onDelete(id) => this.setState({ delete: id })

  onDeleteConfirm(id) =>
    this.setState(state => ({
      delete: undefined
      menus: state.menus~omit(id)
    }))
    { menus } = this.state
    [_id] = Object.keys(menus)
    if _id: history.push(`/${_id}`)

  onAddItem(id, idx) => this.setState({ addItem: { id, idx } })

  onAddItemConfirm(id, idx, item) =>
    this.setState(state =>
      menus = state.menus~cloneDeep()
      menus[id][idx].items.push(item)
      { menus, addItem: false }
    )

  onEditItem(id, idx, i) =>
    this.setState(state => ({
      editItem: {
        id
        idx
        i
        item: state.menus[id][idx].items[i]
      }
    }))

  onEditItemConfirm(id, idx, i, item) =>
    this.setState(state =>
      menus = state.menus~cloneDeep()
      menus[id][idx].items[i] = item
      { menus, editItem: false }
    )

  onDeleteItem(id, idx, i) =>
    this.setState(state =>
      menus = state.menus~cloneDeep()
      menus[id][idx].items = menus[id][idx].items~omit(i)
      { menus, editItem: false }
    )

  toggle() =>
    this.setState({
      add: false
      delete: undefined
      addItem: false
      editItem: false
    })

  render() ->
    {
      menus
      add
      delete: _delete
      addItem
      editItem
    } = this.state
    <div>
      <Router history={history}>
        <div>
          <AddMenu
            isOpen={add}
            toggle={this.toggle}
            onConfirm={this.onAddConfirm}
          />
          <DeleteMenu
            isOpen={_delete != undefined}
            id={_delete}
            toggle={this.toggle}
            onConfirm={=> this.onDeleteConfirm(_delete)}
          />
          <AddItem
            isOpen={addItem}
            toggle={this.toggle}
            onConfirm={item =>
              this.onAddItemConfirm(addItem.id, addItem.idx, item)
            }
          />
          <AddItem
            exists
            isOpen={editItem}
            toggle={this.toggle}
            item={editItem?.item}
            onDelete={=>
              this.onDeleteItem(editItem?.id, editItem?.idx, editItem?.i)
            }
            onConfirm={item =>
              this.onEditItemConfirm(editItem?.id, editItem?.idx, editItem?.i, item)
            }
          />
          <Route
            path="/:id"
            render={props =>
              { id } = props.match.params
              <Fragment>
                <Nav
                  menus={menus}
                  current={id}
                  exists={!!menus[id]}
                  onAdd={this.onAdd}
                  onDelete={this.onDelete}
                />
                {
                  if !menus[id]:
                    <ErrorPage msg="menu could not be found" />
                  else:
                    <Week
                      menu={menus[id]}
                      id={id}
                      onAdd={this.onAddItem}
                      onEdit={this.onEditItem}
                    />
                }
              </Fragment>
            }
          />
          <Route
            exact
            path="/"
            render={->
              <Redirect to={`/${Object.keys(menus)[0]}`} />
            }
          />
        </div>
      </Router>
    </div>
